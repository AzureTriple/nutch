/*
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements.  See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the "License"); you may not use this file except in compliance with
* the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    `maven-publish`
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation("junit:junit:4.13.1")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:30.0-jre")
}

application {
    // Define the main class for the application.
    //mainClass.set("nutch.App")
}

publishing {
    publications {
        create<MavenPublication>("maven") {
            groupId = "org.apache.nutch"
            artifactId = "nutch"
            version = "1.18"

            from(components["java"])
        }
    }
    repositories {
        maven {
            url = uri("https://repository.apache.org/service/local/staging/deploy/maven2")
        }

    }
}

ant.importBuild("build.xml") {old ->"ant-${old}"}


tasks.register<Delete>("clean-default-lib")
{
    description = "--> clean the project libraries directory (dependencies)"
    delete("./build/lib")
}

tasks.register<Delete>("clean-test-lib")
{
    description = "--> clean the project test libraries directory (dependencies)"
    delete("./build/test/lib")
}

tasks.register<Delete>("clean-build")
{
    description = "--> clean the project built files"
    delete("./build")
}

tasks.register<Delete>("clean-dist")
{
    description = "--> clean the project dist files"
    delete("./dist")
}

tasks.register<Delete>("clean-runtime")
{
    description = "--> clean the project runtime area"
    delete("./runtime")
}